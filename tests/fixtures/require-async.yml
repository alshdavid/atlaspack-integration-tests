options:
  name: require-async
package.json:
  type: module
async.js: |
  module.exports = 2;
atlaspack.js: |
  module.exports = Promise.resolve(require('./async'));
resolve-chain.js: |
  module.exports = Promise.resolve(require('./async')).then(x => x + 1335);
rollup.js: >
  module.exports = new Promise(function (resolve) { resolve(require('./async'));
  });
sync.js: |
  module.exports = new Promise(resolve => {
    let b = require('./async');
    resolve(b + 3);
  });
ts-interop-arrow.js: >
  // TypeScript's esModuleInterop flag generates code like this when compiling
  dynamic import()

  "use strict";

  var __importStar = (this && this.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };

  module.exports = Promise.resolve().then(() =>
  __importStar(require('./async')));
ts-interop.js: >
  // TypeScript's esModuleInterop flag generates code like this when compiling
  dynamic import()

  "use strict";

  var __importStar = (this && this.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };

  module.exports = Promise.resolve().then(function () { return
  __importStar(require('./async')); });
ts.js: >
  module.exports = Promise.resolve().then(function () { return
  require('./async'); });
